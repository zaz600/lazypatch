Установка
=========
	1. Для работы скрипта понадобится интерпретатор языка python. Порядок его установки:
		- Для HP-UX:
			- Скачайте исходные тексты с www.python.org (http://www.python.org/ftp/python/2.6.4/Python-2.6.4.tgz)
			- Распакуйте дистрибутив в отдельную папку на сервере:
				- gunzip Python-2.6.4.tgz
				- tar -xf Python-2.6.4.tar
			- Скомпилируйте и установите интерпретатор и модули:
				- cd Python-2.6.4
				- ./configure
				- make install
			Более подробная документация по установке поставляется вместе с дистрибутивом.
		- Для AIX:
			- Скачайте RPM-пакеты с ftp://support.otr.ru/Software/AIX/python
			- Скопируйте файлы на сервер в отдельную папку (например в /tmp/python-install)
			- От пользователя root перейдите в созданный каталог и выполните команду:
				- rpm -ivh --nodeps ./*
		- Для Windows:
			Скачайте инсталлятор (http://www.python.org/ftp/python/2.6.4/python-2.6.4.msi) и
			установите обычным способом
	
	2. Добавить в переменную среды PATH путь к установленному интерпретатору, например:
		export PATH=$PATH:/usr/local/bin (можно также отредактировать $HOME/.profile для
		автоматического выставления этой переменной)
	
	3. Скопировать папку lazypatch в отдельную директорию на сервере appsTier, владельцем
		которой является пользователь, от имени которого запущен сервер приложений
		(например в /ftas01/prod/oebs/apps/lazypatch)
		
	4. Создать каталог, куда будут выкладываться патчи для установки (например /ftas01/prod/oebs/apps/Patches-OEBS).
		В этот каталог следует помещать запакованные патчи (вида 003.003.000.zip)

Настройка
=========
	После установки необходимо отредактировать следующие параметры конфигурационного файла lazypatch.conf:
	В секции [lazypatch]:
		- appspwd (пароль пользователя apps)
		- osusername (логин пользователя, под которым запущен сервер приложений)
		- sidname (SID базы oracle)
		- region (код казначейства, нужен для именования логов)
		- logdir (каталог для формирования логов. В случае отсутствия такового, будет создан автоматически. Туда-же будут складываться запакованные логи для отправки на logs@otr.ru.)
		- installeddir (каталог для перемещения установленных патчей. В случае отсутствия такового, будет создан автоматически)
		- killblocking (скрипт чистки блокирующих сессий. Выполняется перед установкой патчей)
	В секции [xdb]:
		- reptype (тип репозитария отчетов. Возможные значения: files, base для файловой системы и xdb репозитария соответственно)
		- xdbhost (хост базы. Используется только при reptype=base)
		- xdbport (порт xdb репозитария (portpool+20). Используется только при reptype=base)
		- xdblogin (логин xdb репозитария. Используется только при reptype=base)
		- xdbpwd (пароль xdb репозитария. Используется только при reptype=base)
		- guestpath (полный путь к папке с шаблонами. Используется только при reptype=files)

	Для регулярного автоматического запуска программы в определенное время необходимо добавить запись в crontab соответствующего
	пользователя (crontab -e), например для запуска ежедневно в час ночи, строку вида:
	01 1 * * * PATH=$PATH:/usr/local/bin sh -c ". /ftas03/ftas/oebs/apps/apps_st/appl/APPSaftase_a6800u05.env && /ftas03/ftas/oebs/apps/lp_0.1b/lazypatch.py -kqp /ftas03/ftas/oebs/apps/Patches-OEBS"
	(первая команда проинициализирует нужные переменные среды, вторая, при наличии патчей, запустит процесс их установки)

	В программе предусмотрено два контекста логирования: в контекст "lazypatch" выводятся сообщения самой программы, а в контекст "osout" попадает вывод операционной системы.

Справка по ключам запуска
=========================
	--version
		показать версию и выйти
	-h, --help
		показать справку по ключам запуска и выйти
	-d, --debug
		показывать отладочные сообщения
	-t, --test-only
		проверить архивы патчей в PATCHDIR на корректность распаковки и выйти. Не производить реальную установку.
		после размещения архивов в PATCHDIR можно запустить программу с обычными ключами установки, добавив туда ключ -t  
		все архивы будут проверены на целостность, список "битых" архивов можно будет найти в логе.
		далее запускаем обновление с обычными ключами вручную либо ждем, когда отработает назначенное задание в cron
	-p PATCHDIR, --patch-dir=PATCHDIR
		директория с патчами для установки. Если патчей в папке нет, и не указан ни один из ключей -a и -c, то
		программа запишет в лог-файл факт запуска и завершится. При наличии нескольких патчей установка
		будет производиться в порядке сортировки по алфавиту. Распаковка будет произведена в папку, на которую
		указывает переменная среды $APPLTMP. Если патч уже был ранее распакован туда, он будет перезаписан.
	-k, --kill-blocking
		удалять блокирующие сессии перед установкой патчей. Используйте этот флаг с осторожностью.
	-K, --kill-all
		удалять ВСЕ сессии пользователя APPS на уровне БД, а затем и на уровне ОС. Требует настроенной беспарольной
		SSH-авторизации со стороны appsTier на dbTier
	-n, --nosleep
		если указан этот флаг, программа не будет ждать 15 минут до корректного
		завершения всех конкарент-процессов, а сразу вызовет их принудительное завершение. Используйте с осторожностью.
	-i, --nokill
		если указан, то не будут принудительно завершаться никакие процессы. В противном случае после штатной остановки
		appsTier и 15-ти минутного ожидания (если указано --nosleep то сразу же после остановки) будут принудительно
		завершены процессы frmweb (подвисают на AIX) и процессы относящиеся к CM: FNDLIBR (ICM и Standard Manager),
		POXCON (Purchase Order Document Approval) и RCVOLTM (Receiving Transaction Manager).
	-s, --nostop
		устанавливать патчи без остановки appsTier
	-b, --no-restart-db
		не перезапускать БД после остановки appsTier. Если флаг не указан, будет осуществлен рестарт dbTier.
		Если рестартовать БД не удалось, будет осуществлен аварийный выход, патчи устанавливаться не будут,
		appsTier останется остановленным.
	-r, --norunpost
		устанавливать патчи с флагом run_post=N (т.е. без выполнения финальной перекомпиляции всех объектов).
		Для последнего патча перекомпиляция будет выполнена. Если патч только один, то флаг не будет иметь воздействия.
	-f, --run-fast
		если указан этот флаг и reptype=files, то перед запуском appsTier программа переименует каталог с
		шаблонами Guest в Guest.faststart, и выполнит обратную операцию после запуска oacore. Для reptype=base
		программа выполнит аналогичную процедуру, но вместо переименования каталога будет очищена FTP-директория Guest,
		а после запуска oacore будет выполнена процедура регистрации шаблонов (XXT_RP_BIP_TEST.REG_ALL_REPORT). Данный
		флаг позволяет избежать получасовую задержку при старте oacore
	-q, --no-check-conc
		не выполнять останов и проверку канкарентов переноса в ГК. Если этот флаг не указан, то согласно
		"Регламенту остановки-запуска OEBS" служебные канкаренты бадут переведены в статус "HOLD" перед остановкой appsTier
		и осуществлена проверка их корректного завершения
	-a, --run-autoconfig
		выполнить adautoconfig перед стартом appsTier (будет выполняться после установки патчей)
	-c CUSTOMFILE, --custom-file=CUSTOMFILE
		выполнить произвольный файл CUSTOMFILE (будет выполняться после установки патчей и после выполения autoconfig),
		например custom.sh на *NIX платформах или run.cmd на Windows

Обратная связь
==============
	Вопросы по работе программы, предложения по расширению функционала, замеченные баги и замечания можно
	присылать мне на <komarov.vadim@otr.ru>, <dotvad@gmail.com> или по ICQ 439-314-434